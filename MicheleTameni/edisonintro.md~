## Intel Edison, an introduction

### Introduction
While mobile devices as smartphones are becoming bigger and bigger at every update, there's a new wave of devices, like smartwatch and more in general wearables, that are hitting the market right now.
Meanwhile the maker movement growned a lot in the last few year, with Arduino leading the prototyping hardware market. Last year Intel introduced a device that is appealing for makers but ready for IoT and wearabled products, the Intel Edison.
Edison small size compute module capable of running a full linux distribution and intented to empower the next generation of wearables, robots and the Internet of Things (IoT) devices.

### Hardware
Intel edison is a really small board, slighlty larger than a SD card (35.5 × 25.0 × 3.9 mm) featuring a a dual-core, dual-threaded Intel® Atom™ CPU at 500 MHz and a 32-bit Intel® Quark™ microcontroller at 100 MHz. 1GB of RAM, 4 GB of flash storage, WiFi and bluetooth.
It also has 1 USB OTG controller, and all the interfaces that a maker can dream on: UART, I2C, SPI, I2S, GPIO and SD Card support.

### Breakout board

Edison comes in a package with a 70 pin connector, quite difficult to use directly so for easy easy prototyping you can use one of the brekout board avaiable avaiable.
The two official supported are the the _Intel Edison Board for Arduino_ and the _Intel Edison Brekout Board_.

### Intel Edison Board for Arduino
This board is the largest and interdaces rich board avaiable. It feature I/O Compatible with Arduino Uno (except 4 PWM instead of 6 PWM), 20 digital input/output pins (including 4 pins as PWM outputs).
6 analog inputs, UART (Rx/Tx), I2C,  ICSP 6-pin header (SPI) and a Micro USB device connector or a dedicated standard size USB.
host Type-A connector. Also it feature a  Micro USB device (connected to UART) a SD card connector and a DC power jack.



### Intel Edison Brekout Board
The breackout board is much smaller than the Arduino's one, slightly larger than the Edison module itseld. The board has a minimal set of features: Exposes native 1.8 V I/O of the Edison module,  0.1 inch grid I/O array of through-hole solder points, USB OTG with USB Micro Type-AB connector and a USB OTG power switch. Also tou can finf a Battery charger,  USB to device UART bridge with USB micro Type-B connector and a DC power supply jack.

### Software

Edison comes with a prebuild Yocto Linux image, but it's capable to run your Linux distribution of choice. Yocto is a meta-distribution used by embedded developers to create tailored image to their needs.
Intel choose this OS so developers can just start using the default image, play with that, configure and customize it as they prefer and then prepare a costom image for the product once everythings is ok, making this process as easy as possible using some simple commands provided by the Yocto project.
Having a full linux distribution on a device like this open a lot of possibilities, developer will be able to reuse the wide range of already avaiable packages and libraries for linux, making developmente of a product much faster and simpler. Also they don't need to learn any new language, toolkit or use any SDK at all if they want, but just develope with standard GNU/Linux directly on the device! Ok, this can be quite slow but...
Obviusly Intel offer some (actually many) tools to get developer started with Edison development, here I will talk about some of them.

#### Edison SDK
The (https://software.intel.com/en-us/iot/hardware/edison/downloads)[Intel Edison SDK] provide all the necessary tools to develop for the platform.
It's based on Eclipse (yes another instance of Eclipse on your pc) and it include the cross-compile tools, connector to deploy and debug your software on the board and the basic library and documentation a developer will need.

#### Intel XDK IoT Edition
Intel has released a (https://software.intel.com/en-us/html5/xdk-iot)[IoT variant] of the XDK environment, covered in (http://www.sitepoint.com/?s=intel+xdk)[other articles here on SitePoint].
With this developers will be able to easily write javascript application (will be running on the Edison as Node.js apps) and test it on the device. Intel also made easy to make companion HTML5 mobile companion app that can comunicate with the board.
#### Arduino
Edison, with the Arduino brakout, it's able to run the Arduino's sketchs. So with the right version of the (https://software.intel.com/en-us/iot/hardware/edison/downloads)[Arduino IDE] developers will be able to use the really wide range of libraries, examples and sketches already avaiable. This, combined with the power of a full Linux distribution it's a really powerfull platform for exper and beginners.

#### Wyliodrin
With Wyliodrin you don't have to know a programming language. Early developers can program their boards using a visual & streams programming systems, just draggin and dropping blocks.
Wyliodrin will write the code for them. An option for who wants to start.

### Libraries
Intel it's really commited to make the developers experience as seampleass as possibile, and has released two usefull library that abstract, the IO and a broad range of sensors, to allow developer to forget about the low level stuff and be committed to the user experience. Both those library as binding for C++, Python and Javascript. 

#### Lib MRAA
(http://iotdk.intel.com/docs/mraa/v0.6.0/)[Lib MRAA] C/C++ library (with bindings to javascript & python) to interface with the IO of Edison & other platforms.
If offer a structured and sane API and does not tie you to specific hardware because it offer  board detection done at runtime, so pin numbering will match the board corrently in use. 


#### UPM
(https://github.com/intel-iot-devkit/upm)[UPM] is a high level repository for sensors that use libmraa. UPM typically rapresent a  sensor as a class.

The constructor is expected to initialise the sensor and parameters may be used to provide identification/pin location on the board.

Typically an update() function will be called in order to get new data from the sensor in order to reduce load when doing multiple reads to sensor data.
